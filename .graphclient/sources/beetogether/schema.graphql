schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Hive {
  id: ID!
  address: Bytes!
  owner: BigInt!
  honeyFee: Int!
  members: [BigInt!]!
  cid: String
  description: HiveDescription
  proposalRequests(skip: Int = 0, first: Int = 100, orderBy: ProposalRequest_orderBy, orderDirection: OrderDirection, where: ProposalRequest_filter): [ProposalRequest!]
}

type HiveDescription {
  id: ID!
  offeredServices: String
  manifesto: String
}

input HiveDescription_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  offeredServices: String
  offeredServices_not: String
  offeredServices_gt: String
  offeredServices_lt: String
  offeredServices_gte: String
  offeredServices_lte: String
  offeredServices_in: [String!]
  offeredServices_not_in: [String!]
  offeredServices_contains: String
  offeredServices_contains_nocase: String
  offeredServices_not_contains: String
  offeredServices_not_contains_nocase: String
  offeredServices_starts_with: String
  offeredServices_starts_with_nocase: String
  offeredServices_not_starts_with: String
  offeredServices_not_starts_with_nocase: String
  offeredServices_ends_with: String
  offeredServices_ends_with_nocase: String
  offeredServices_not_ends_with: String
  offeredServices_not_ends_with_nocase: String
  manifesto: String
  manifesto_not: String
  manifesto_gt: String
  manifesto_lt: String
  manifesto_gte: String
  manifesto_lte: String
  manifesto_in: [String!]
  manifesto_not_in: [String!]
  manifesto_contains: String
  manifesto_contains_nocase: String
  manifesto_not_contains: String
  manifesto_not_contains_nocase: String
  manifesto_starts_with: String
  manifesto_starts_with_nocase: String
  manifesto_not_starts_with: String
  manifesto_not_starts_with_nocase: String
  manifesto_ends_with: String
  manifesto_ends_with_nocase: String
  manifesto_not_ends_with: String
  manifesto_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [HiveDescription_filter]
  or: [HiveDescription_filter]
}

enum HiveDescription_orderBy {
  id
  offeredServices
  manifesto
}

input Hive_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  owner: BigInt
  owner_not: BigInt
  owner_gt: BigInt
  owner_lt: BigInt
  owner_gte: BigInt
  owner_lte: BigInt
  owner_in: [BigInt!]
  owner_not_in: [BigInt!]
  honeyFee: Int
  honeyFee_not: Int
  honeyFee_gt: Int
  honeyFee_lt: Int
  honeyFee_gte: Int
  honeyFee_lte: Int
  honeyFee_in: [Int!]
  honeyFee_not_in: [Int!]
  members: [BigInt!]
  members_not: [BigInt!]
  members_contains: [BigInt!]
  members_contains_nocase: [BigInt!]
  members_not_contains: [BigInt!]
  members_not_contains_nocase: [BigInt!]
  cid: String
  cid_not: String
  cid_gt: String
  cid_lt: String
  cid_gte: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_contains_nocase: String
  cid_not_contains: String
  cid_not_contains_nocase: String
  cid_starts_with: String
  cid_starts_with_nocase: String
  cid_not_starts_with: String
  cid_not_starts_with_nocase: String
  cid_ends_with: String
  cid_ends_with_nocase: String
  cid_not_ends_with: String
  cid_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_: HiveDescription_filter
  proposalRequests_: ProposalRequest_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Hive_filter]
  or: [Hive_filter]
}

enum Hive_orderBy {
  id
  address
  owner
  honeyFee
  members
  cid
  description
  description__id
  description__offeredServices
  description__manifesto
  proposalRequests
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type ProposalRequest {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
  ownerId: BigInt!
  sharedAmount: BigInt!
  status: ProposalRequestStatus!
  members: [BigInt!]!
  shares: [Int!]!
  serviceId: BigInt!
  rateToken: String
  rateAmount: BigInt
  cid: String
  platformId: BigInt
  description: ProposalRequestDescription
  expirationDate: BigInt
  hive: Hive!
}

type ProposalRequestDescription {
  id: ID!
  proposal: ProposalRequest!
  startDate: BigInt
  about: String
  expectedHours: BigInt
  video_url: String
}

input ProposalRequestDescription_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: ProposalRequest_filter
  startDate: BigInt
  startDate_not: BigInt
  startDate_gt: BigInt
  startDate_lt: BigInt
  startDate_gte: BigInt
  startDate_lte: BigInt
  startDate_in: [BigInt!]
  startDate_not_in: [BigInt!]
  about: String
  about_not: String
  about_gt: String
  about_lt: String
  about_gte: String
  about_lte: String
  about_in: [String!]
  about_not_in: [String!]
  about_contains: String
  about_contains_nocase: String
  about_not_contains: String
  about_not_contains_nocase: String
  about_starts_with: String
  about_starts_with_nocase: String
  about_not_starts_with: String
  about_not_starts_with_nocase: String
  about_ends_with: String
  about_ends_with_nocase: String
  about_not_ends_with: String
  about_not_ends_with_nocase: String
  expectedHours: BigInt
  expectedHours_not: BigInt
  expectedHours_gt: BigInt
  expectedHours_lt: BigInt
  expectedHours_gte: BigInt
  expectedHours_lte: BigInt
  expectedHours_in: [BigInt!]
  expectedHours_not_in: [BigInt!]
  video_url: String
  video_url_not: String
  video_url_gt: String
  video_url_lt: String
  video_url_gte: String
  video_url_lte: String
  video_url_in: [String!]
  video_url_not_in: [String!]
  video_url_contains: String
  video_url_contains_nocase: String
  video_url_not_contains: String
  video_url_not_contains_nocase: String
  video_url_starts_with: String
  video_url_starts_with_nocase: String
  video_url_not_starts_with: String
  video_url_not_starts_with_nocase: String
  video_url_ends_with: String
  video_url_ends_with_nocase: String
  video_url_not_ends_with: String
  video_url_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProposalRequestDescription_filter]
  or: [ProposalRequestDescription_filter]
}

enum ProposalRequestDescription_orderBy {
  id
  proposal
  proposal__id
  proposal__createdAt
  proposal__updatedAt
  proposal__ownerId
  proposal__sharedAmount
  proposal__status
  proposal__serviceId
  proposal__rateToken
  proposal__rateAmount
  proposal__cid
  proposal__platformId
  proposal__expirationDate
  startDate
  about
  expectedHours
  video_url
}

enum ProposalRequestStatus {
  Pending
  Executed
}

input ProposalRequest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  ownerId: BigInt
  ownerId_not: BigInt
  ownerId_gt: BigInt
  ownerId_lt: BigInt
  ownerId_gte: BigInt
  ownerId_lte: BigInt
  ownerId_in: [BigInt!]
  ownerId_not_in: [BigInt!]
  sharedAmount: BigInt
  sharedAmount_not: BigInt
  sharedAmount_gt: BigInt
  sharedAmount_lt: BigInt
  sharedAmount_gte: BigInt
  sharedAmount_lte: BigInt
  sharedAmount_in: [BigInt!]
  sharedAmount_not_in: [BigInt!]
  status: ProposalRequestStatus
  status_not: ProposalRequestStatus
  status_in: [ProposalRequestStatus!]
  status_not_in: [ProposalRequestStatus!]
  members: [BigInt!]
  members_not: [BigInt!]
  members_contains: [BigInt!]
  members_contains_nocase: [BigInt!]
  members_not_contains: [BigInt!]
  members_not_contains_nocase: [BigInt!]
  shares: [Int!]
  shares_not: [Int!]
  shares_contains: [Int!]
  shares_contains_nocase: [Int!]
  shares_not_contains: [Int!]
  shares_not_contains_nocase: [Int!]
  serviceId: BigInt
  serviceId_not: BigInt
  serviceId_gt: BigInt
  serviceId_lt: BigInt
  serviceId_gte: BigInt
  serviceId_lte: BigInt
  serviceId_in: [BigInt!]
  serviceId_not_in: [BigInt!]
  rateToken: String
  rateToken_not: String
  rateToken_gt: String
  rateToken_lt: String
  rateToken_gte: String
  rateToken_lte: String
  rateToken_in: [String!]
  rateToken_not_in: [String!]
  rateToken_contains: String
  rateToken_contains_nocase: String
  rateToken_not_contains: String
  rateToken_not_contains_nocase: String
  rateToken_starts_with: String
  rateToken_starts_with_nocase: String
  rateToken_not_starts_with: String
  rateToken_not_starts_with_nocase: String
  rateToken_ends_with: String
  rateToken_ends_with_nocase: String
  rateToken_not_ends_with: String
  rateToken_not_ends_with_nocase: String
  rateAmount: BigInt
  rateAmount_not: BigInt
  rateAmount_gt: BigInt
  rateAmount_lt: BigInt
  rateAmount_gte: BigInt
  rateAmount_lte: BigInt
  rateAmount_in: [BigInt!]
  rateAmount_not_in: [BigInt!]
  cid: String
  cid_not: String
  cid_gt: String
  cid_lt: String
  cid_gte: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_contains_nocase: String
  cid_not_contains: String
  cid_not_contains_nocase: String
  cid_starts_with: String
  cid_starts_with_nocase: String
  cid_not_starts_with: String
  cid_not_starts_with_nocase: String
  cid_ends_with: String
  cid_ends_with_nocase: String
  cid_not_ends_with: String
  cid_not_ends_with_nocase: String
  platformId: BigInt
  platformId_not: BigInt
  platformId_gt: BigInt
  platformId_lt: BigInt
  platformId_gte: BigInt
  platformId_lte: BigInt
  platformId_in: [BigInt!]
  platformId_not_in: [BigInt!]
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_: ProposalRequestDescription_filter
  expirationDate: BigInt
  expirationDate_not: BigInt
  expirationDate_gt: BigInt
  expirationDate_lt: BigInt
  expirationDate_gte: BigInt
  expirationDate_lte: BigInt
  expirationDate_in: [BigInt!]
  expirationDate_not_in: [BigInt!]
  hive: String
  hive_not: String
  hive_gt: String
  hive_lt: String
  hive_gte: String
  hive_lte: String
  hive_in: [String!]
  hive_not_in: [String!]
  hive_contains: String
  hive_contains_nocase: String
  hive_not_contains: String
  hive_not_contains_nocase: String
  hive_starts_with: String
  hive_starts_with_nocase: String
  hive_not_starts_with: String
  hive_not_starts_with_nocase: String
  hive_ends_with: String
  hive_ends_with_nocase: String
  hive_not_ends_with: String
  hive_not_ends_with_nocase: String
  hive_: Hive_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProposalRequest_filter]
  or: [ProposalRequest_filter]
}

enum ProposalRequest_orderBy {
  id
  createdAt
  updatedAt
  ownerId
  sharedAmount
  status
  members
  shares
  serviceId
  rateToken
  rateAmount
  cid
  platformId
  description
  description__id
  description__startDate
  description__about
  description__expectedHours
  description__video_url
  expirationDate
  hive
  hive__id
  hive__address
  hive__owner
  hive__honeyFee
  hive__cid
}

type Query {
  hive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hive
  hives(
    skip: Int = 0
    first: Int = 100
    orderBy: Hive_orderBy
    orderDirection: OrderDirection
    where: Hive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hive!]!
  hiveDescription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HiveDescription
  hiveDescriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: HiveDescription_orderBy
    orderDirection: OrderDirection
    where: HiveDescription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HiveDescription!]!
  proposalRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposalRequest
  proposalRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposalRequest_orderBy
    orderDirection: OrderDirection
    where: ProposalRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposalRequest!]!
  proposalRequestDescription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposalRequestDescription
  proposalRequestDescriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposalRequestDescription_orderBy
    orderDirection: OrderDirection
    where: ProposalRequestDescription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposalRequestDescription!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  hive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Hive
  hives(
    skip: Int = 0
    first: Int = 100
    orderBy: Hive_orderBy
    orderDirection: OrderDirection
    where: Hive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Hive!]!
  hiveDescription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): HiveDescription
  hiveDescriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: HiveDescription_orderBy
    orderDirection: OrderDirection
    where: HiveDescription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [HiveDescription!]!
  proposalRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposalRequest
  proposalRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposalRequest_orderBy
    orderDirection: OrderDirection
    where: ProposalRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposalRequest!]!
  proposalRequestDescription(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProposalRequestDescription
  proposalRequestDescriptions(
    skip: Int = 0
    first: Int = 100
    orderBy: ProposalRequestDescription_orderBy
    orderDirection: OrderDirection
    where: ProposalRequestDescription_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProposalRequestDescription!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}